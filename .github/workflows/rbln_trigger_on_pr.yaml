name: Optimum-rbln / PR

on:
  pull_request:
    branches:
      - main

env:
  REBEL_PYPI_ENDPOINT: ${{ vars.REBEL_PYPI_INTERNAL_ENDPOINT }}
  REBEL_PYPI_USERNAME: ${{ secrets.REBEL_PYPI_USERNAME }}
  REBEL_PYPI_PASSWORD: ${{ secrets.REBEL_PYPI_PASSWORD }}

jobs:
  check-skip-ci:
    runs-on: rebel-k8s-runner
    outputs:
      should_skip: ${{ contains(github.event.pull_request.head.commit.message, '[skip ci]') }}
    steps:
      - name: Check if [skip ci] is in commit message
        run: |
          if ${{ contains(github.event.pull_request.head.commit.message, '[skip ci]') }}; then
            echo "Found [skip ci] in commit message, skipping CI"
          else
            echo "No [skip ci] found, continuing with CI"
          fi

  check-code-quality:
    needs: check-skip-ci
    if: ${{ needs.check-skip-ci.outputs.should_skip != 'true' }}
    uses: ./.github/workflows/check_code_quality.yml
    
  test-docstrings:
    needs: check-skip-ci
    if: ${{ needs.check-skip-ci.outputs.should_skip != 'true' }}
    uses: ./.github/workflows/test-docstrings.yml

  load-version:
    runs-on: rebel-k8s-runner
    needs: [check-skip-ci, check-code-quality, test-docstrings]
    if: ${{ needs.check-skip-ci.outputs.should_skip != 'true' }}
    outputs:
      compiler_version: ${{ steps.get_version.outputs.compiler_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Get compiler version
        id: get_version
        run: |
          VERSION=$(grep rebel_compiler_version .github/version.yaml | cut -d ':' -f2 | tr -d ' ')
          echo "compiler_version=$VERSION" >> $GITHUB_OUTPUT

  check-compiler:
    needs: [check-skip-ci, check-code-quality, test-docstrings, load-version]
    if: ${{ needs.check-skip-ci.outputs.should_skip != 'true' }}
    uses: ./.github/workflows/rbln_check_compiler.yaml
    with:
      compiler_version: ${{ needs.load-version.outputs.compiler_version }}
    secrets: inherit

  check-team-member:
    runs-on: rebel-k8s-runner
    needs: [check-skip-ci, check-code-quality, test-docstrings, check-compiler]
    if: ${{ needs.check-skip-ci.outputs.should_skip != 'true' && needs.check-compiler.outputs.compiler_version_check == 'true' }}
    outputs:
      is_team_member: ${{ steps.check_member.outputs.IS_TEAM_MEMBER }}
    steps:
      - name: Fetch team members
        id: fetch_team
        run: |
          response=$(curl -s -H "Authorization: Bearer ${{ secrets.GIT_PAT }}" \
            -H "Content-Type: application/json" \
            -d '{"query":"query { organization(login: \"rebellions-sw\") { team(slug: \"rebel-sw-team\") { members(first: 100) { nodes { login } } } } }"}' \
            https://api.github.com/graphql)
          echo "$response" | jq -r '.data.organization.team.members.nodes[].login' > team_members.txt

      - name: Check if PR author is a team member
        id: check_member
        run: |
          pr_author=${{ github.event.pull_request.user.login }}
          if grep -qx "$pr_author" team_members.txt; then
            echo "IS_TEAM_MEMBER=true" >> $GITHUB_OUTPUT
          else
            echo "IS_TEAM_MEMBER=false" >> $GITHUB_OUTPUT
          fi

  optimum-rbln-pytest:
    needs: [check-skip-ci, check-code-quality, test-docstrings, check-compiler, check-team-member]
    if: ${{ needs.check-skip-ci.outputs.should_skip != 'true' && needs.check-team-member.outputs.is_team_member == 'true' }}
    uses: ./.github/workflows/rbln_optimum_pytest.yaml
    with:
      ref: ${{ github.event.pull_request.head.sha }}
      rebel_compiler_version: ${{ needs.check-compiler.outputs.compiler_version }}
      test_level: "default"
    secrets: inherit

  summary_and_report:
    needs: [load-version, check-compiler, check-team-member, optimum-rbln-pytest]
    if: always() && needs.check-team-member.outputs.is_team_member == 'true'
    runs-on: rebel-k8s-runner
    steps:
      - name: Get failed test details
        id: get_failed_tests
        if: needs.optimum-rbln-pytest.result == 'failure'
        run: |
          # Get the workflow run jobs
          JOBS=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/jobs")
          
          # Extract failed pytest job names
          FAILED_TESTS=$(echo "$JOBS" | jq -r '.jobs[] | select(.conclusion == "failure" and (.name | contains("Pytest"))) | .name' | sed 's/Pytest (\(.*\))/\1/' | tr '\n' ', ' | sed 's/,$//')
          
          if [ -z "$FAILED_TESTS" ]; then
            echo "failed_tests=Unknown" >> $GITHUB_OUTPUT
          else
            echo "failed_tests=$FAILED_TESTS" >> $GITHUB_OUTPUT
          fi

      - name: Determine test results
        id: test_results
        run: |
          # Determine pytest status
          if [ "${{ needs.optimum-rbln-pytest.result }}" == "success" ]; then
            echo "pytest_status=✅ Success - All tests passed" >> $GITHUB_OUTPUT
            echo "pytest_emoji=✅" >> $GITHUB_OUTPUT
          elif [ "${{ needs.optimum-rbln-pytest.result }}" == "failure" ]; then
            FAILED="${{ steps.get_failed_tests.outputs.failed_tests }}"
            if [ -n "$FAILED" ] && [ "$FAILED" != "Unknown" ]; then
              echo "pytest_status=❌ Failed - Tests: \`$FAILED\`" >> $GITHUB_OUTPUT
            else
              echo "pytest_status=❌ Failed" >> $GITHUB_OUTPUT
            fi
            echo "pytest_emoji=❌" >> $GITHUB_OUTPUT
          elif [ "${{ needs.optimum-rbln-pytest.result }}" == "skipped" ]; then
            echo "pytest_status=⏭️ Skipped" >> $GITHUB_OUTPUT
            echo "pytest_emoji=⏭️" >> $GITHUB_OUTPUT
          else
            echo "pytest_status=⚠️ Cancelled" >> $GITHUB_OUTPUT
            echo "pytest_emoji=⚠️" >> $GITHUB_OUTPUT
          fi

          # Determine compiler check status
          if [ "${{ needs.check-compiler.result }}" == "success" ]; then
            echo "compiler_status=✅ Available" >> $GITHUB_OUTPUT
          else
            echo "compiler_status=❌ Not Available" >> $GITHUB_OUTPUT
          fi

      - name: Notify Slack
        if: always()
        run: |
          # Determine overall workflow status emoji
          if [ "${{ needs.optimum-rbln-pytest.result }}" == "success" ]; then
            title="✅ Optimum-RBLN PR #${{ github.event.pull_request.number }} Pytest Results"
          elif [ "${{ needs.check-compiler.result }}" != "success" ]; then
            title="⚠️ Optimum-RBLN PR #${{ github.event.pull_request.number }} Pytest Results - Compiler Check Failed"
          else
            title="❌ Optimum-RBLN PR #${{ github.event.pull_request.number }} Pytest Results"
          fi

          pr_title="${{ github.event.pull_request.title }}"
          pr_author="${{ github.event.pull_request.user.login }}"
          pr_link="*PR*\n<${{ github.event.pull_request.html_url }}|#${{ github.event.pull_request.number }} - $pr_title>"
          commit="*Commit*\n<https://github.com/rebellions-sw/optimum-rbln/commit/${{ github.event.pull_request.head.sha }}|${{ github.event.pull_request.head.sha }}>"
          action_link="*CI Report*\n<https://github.com/rebellions-sw/optimum-rbln/actions/runs/${{ github.run_id }}|View Details>"
          compiler_version="${{ needs.load-version.outputs.compiler_version }}"

          payload=$(cat <<EOF
          {
            "channel": "${{ secrets.SLACK_CI_REPORTER_CHANNEL }}",
            "text": "Optimum-RBLN PR #${{ github.event.pull_request.number }} Test Results",
            "blocks": [
              {
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": "$title"
                }
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": "$pr_link"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Author*\n@$pr_author"
                  }
                ]
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": "$commit"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "$action_link"
                  }
                ]
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": "*Compiler Version*"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "\`$compiler_version\`"
                  }
                ]
              },
              {
                "type": "divider"
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": "*Compiler Check*"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "${{ steps.test_results.outputs.compiler_status }}"
                  }
                ]
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": "*Pytest Results*"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "${{ steps.test_results.outputs.pytest_status }}"
                  }
                ]
              }
            ]
          }
          EOF
          )
          curl -X POST -H 'Authorization: Bearer ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}' -H 'Content-type: application/json; charset=utf-8' --data "$payload" https://slack.com/api/chat.postMessage